1.	String s = “abcd”,从中取出任意元素后剩余字符串表示
C++
For(int i=0;i<s.size();i++)
{
	String element = s.substr(i,1);
	String left = s.substr(0,i);
	String right = s.substr(i+1,s.size()-1-i);
}
Java
For(int i=0;i<s.length();i++)
{
	String element = s.substring(i,i+1);
	String left = s.substring(0,i);
	String right = s.substring(i+1,s.length());
}

2.最长公共子序列
#include <iostream>
#include <vector>

using namespace std;

int sum(vector<int> v_data, int begin, int end)
{
	return (begin<end?v_data[begin]+sum(v_data,begin+1,end):v_data[begin]);
}

int solution1(vector<int> v_data)
{
	int max = 0;
	for(int i=0;i<v_data.size();i++)
	{
		for(int j=i;j<v_data.size();j++)
		{
			int temp = sum(v_data,i,j);
			if(temp > max)
			{
				max = temp;
			}
		}
	}
	return max;
}

int main()
{
	int data[] = {4,6,7,1,-2,-5,1,2,3};
	vector<int> v_data(data,data+9);
	int rc = solution1(v_data);
	cout << rc << "\n";
}

// using array only

#include <iostream>
using namespace std;
int sum(int* data, int begin, int end)
{
	return (begin<end?data[begin]+sum(data,begin+1,end):data[begin]);
}
int solution1(int* data, int length)
{
	int max = 0;
	for(int i=0;i<length;i++)
	{
		for(int j=i;j<length;j++)
		{
			int temp = sum(data,i,j);
			if(temp > max)
			{
				max = temp;
			}
		}
	}
	return max;
}
int main()
{
	int data[] = {4,6,7,1,-2,-5,1,2,3};
	int length = sizeof(data)/sizeof(int);
	int rc = solution1(data,length);
	cout << rc << "\n";
}


#include <iostream>
using namespace std;
#define N 50

int solution2(int* data, int length)
{
	int matrix[N][N] = {{0}};
	int max = 0;
	for(int i=0;i<length;i++)
	{
		matrix[i][i] = data[i];
	}

	for(int i=0;i<length;i++)
	{
		for(int j=i+1;j<length;j++)
		{
			matrix[i][j] = matrix[i][j-1] + data[j]; 
		}
	}

	for(int i=0;i<length;i++)
	{
		for(int j=i+1;j<length;j++)
		{
			int temp = matrix[i][j];
			if(temp > max)
			{
				max = temp;
			}
		}
	}
	return max;
}
int main()
{
	int data[] = {4,6,7,1,-2,-5,1,2,3};
	int length = sizeof(data)/sizeof(int);
	int rc = solution2(data,length);
	cout << rc << "\n";
}



#include <iostream>
using namespace std;

// The assumption here is that the sum is positive instead of negative, so rule out the situaion with sum less than zero
int solution3(int* data, int length)
{
	int max = 0;
	int sum = 0;
	for(int i=0;i<length;i++)
	{
		sum += data[i];
		if(sum > max)
		{
			max = sum;
		}
		if(sum < 0)
		{
			sum = 0;
		}
	}
	return max;
}
int main()
{
	int data[] = {4,6,7,1,-2,-5,1,2,3};
	int length = sizeof(data)/sizeof(int);
	int rc = solution3(data,length);
	cout << rc << "\n";
}
