线段覆盖问题



























喷水装置（一）
描述 
现有一块草坪，长为20米，宽为2米，要在横中心线上放置半径为Ri的喷水装置，每个喷水装置的效果都会让以它为中心的半径为实数Ri(0<Ri<15)的圆被湿润，
这有充足的喷水装置i（1<i<600)个，并且一定能把草坪全部湿润，你要做的是：选择尽量少的喷水装置，把整个草坪的全部湿润。
输入第一行m表示有m组测试数据
每一组测试数据的第一行有一个整数数n，n表示共有n个喷水装置，随后的一行，有n个实数ri，ri表示该喷水装置能覆盖的圆的半径。

输出
输出所用装置的个数

样例输入2
5
2 3.2 4 4.5 6 
10
1 2 3 1 2 1.2 3 1.1 1 2
样例输出2
5

思路：
此处应假设喷水装置半径>1，对喷水装置喷水进行排序，然后利用贪心算法从最大开始遍历即可
#include <iostream>
#include <algorithm>

using namespace std;
int main()
{
	int m=0,n=0;
	cin>>m;
	int* result = new int[m];
	for(int i=0;i<m;i++)
	{
		cin>>n;
		double* devices = new double[n];
		for(int j=0;j<n;j++)
		{
			cin>>devices[j];
		}
		sort(devices,devices+n);
		int k =0, sum=0;
		for(k=n-1;k>=0;k--)
		{
			sum += 2*devices[k];
			if(sum >= 20) break;
		}
		result[i]=n-k;
	}
	for(int i=0;i<m;i++)
	{
		cout << result[i] << "\n";
	}
}


喷水装置（二）
描述 
有一块草坪，横向长w,纵向长为h,在它的橫向中心线上不同位置处装有n(n<=10000)个点状的喷水装置，
每个喷水装置i喷水的效果是让以它为中心半径为Ri的圆都被润湿。
请在给出的喷水装置中选择尽量少的喷水装置，把整个草坪全部润湿。
输入
第一行输入一个正整数N表示共有n次测试数据。
每一组测试数据的第一行有三个整数n,w,h，n表示共有n个喷水装置，w表示草坪的横向长度，h表示草坪的纵向长度。
随后的n行，都有两个整数xi和ri,xi表示第i个喷水装置的的横坐标（最左边为0），ri表示该喷水装置能覆盖的圆的半径。
输出每组测试数据输出一个正整数，表示共需要多少个喷水装置，每个输出单独占一行。
如果不存在一种能够把整个草坪湿润的方案，请输出0。
样例输入
2
2 8 6
1 1
4 5
2 10 6
4 5
6 5
样例输出
1
2


#include <iostream>
#include <algorithm>

using namespace std;
struct node
{
	int head,tail;
	node(){}
	node(int x,int r)
	{
		head = (x-r<0?0:x-r);
		tail = x+r;
	}
	void createNode(int x,int r)
	{
		head = (x-r<0?0:x-r);
		tail = x+r;
	}
};

bool cmp(node a, node b)
{
	if(a.head < b.tail) return true;
	return false;
}

int main()
{
	int N=0,n=0;
	double w=0.0,h=0.0;
	cin>>N;
	int* result = new int[N];
	for(int i=0;i<N;i++)
	{
		cin>>n>>w>>h;
		node* temp = new node[n];
		double xi=0.0,yi=0.0,ri=0.0;
		for(int j=0;j<n;j++)
		{
			cin>>xi>>ri;	
			temp[j].createNode(xi,ri);
		}
		//sort(temp,temp+n,cmp);

		double sum = 0;
		int counter = 0;
		while(sum<w)
		{
			double max = 0;
			for(int k=0;k<n;k++)
			{
				double left = temp[k].head;
				double right = temp[k].tail;
				if(left<=sum&&max<right)	max = right;
			}
			if(max >=w)
			{
				result[i] = ++counter;
				counter = 0;
				break;
			}
			else if(sum == max)	
			{
				result[i] = counter;
				counter = 0;
				break;
			}
			else
			{
				cout << "\n";
				sum = max;
				counter++;
			}
		}
	}

	for(int i=0;i<N;i++)
	{
		cout << result[i] <<"\n";
	}
}
